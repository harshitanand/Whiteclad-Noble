version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/ai_agents_platform
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ai-agents-network

  # MongoDB database
  mongodb:
    image: mongo:7.0
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=ai_agents_platform
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/ai_agents_platform --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ai-agents-network

  # Redis cache
  redis:
    image: redis:7.0-alpine
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ai-agents-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - ai-agents-network

  # MongoDB Express (development only)
  mongo-express:
    image: mongo-express:latest
    ports:
      - '8081:8081'
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password123@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongodb
    restart: unless-stopped
    profiles:
      - dev
    networks:
      - ai-agents-network

  # Redis Commander (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - '8082:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=redis123
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - dev
    networks:
      - ai-agents-network

# Named volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

# Network for service communication
networks:
  ai-agents-network:
    driver: bridge
